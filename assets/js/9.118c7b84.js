(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{263:function(s,t,a){s.exports=a.p+"assets/img/memory_model_001.77e88070.jpg"},264:function(s,t,a){s.exports=a.p+"assets/img/memory_model_002.b2947a70.jpg"},265:function(s,t,a){s.exports=a.p+"assets/img/memory_model_003.bc5aeab0.jpg"},266:function(s,t,a){s.exports=a.p+"assets/img/memory_model_004.d988fa5a.jpg"},267:function(s,t,a){s.exports=a.p+"assets/img/memory_model_005.9352a989.jpg"},294:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("Java 内存模型")]),s._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#多核并发缓存架构-硬件内存结构"}},[s._v("多核并发缓存架构(硬件内存结构)")])]),n("li",[n("a",{attrs:{href:"#jmm-线程内存模型"}},[s._v("JMM 线程内存模型")]),n("ul",[n("li",[n("a",{attrs:{href:"#指令重排序"}},[s._v("指令重排序")])]),n("li",[n("a",{attrs:{href:"#多线程下导致的问题及解决办法"}},[s._v("多线程下导致的问题及解决办法")])]),n("li",[n("a",{attrs:{href:"#什么是内存屏障？"}},[s._v("什么是内存屏障？")])]),n("li",[n("a",{attrs:{href:"#happens-before原则-先行发生原则"}},[s._v("happens-before原则(先行发生原则)")])]),n("li",[n("a",{attrs:{href:"#as-if-serial和happens-before小结"}},[s._v("as-if-serial和happens-before小结")])])])])])]),n("p"),s._v(" "),n("p",[s._v("并发编程模型两大关键问题")]),s._v(" "),n("ul",[n("li",[s._v("线程间的通信:即线程间通过写-读内存中的公共状态来隐式进行通信")])]),s._v(" "),n("p",[s._v("1.隐式:共享内存 ——> java的并发采用的是共享内存模型:JMM")]),s._v(" "),n("p",[s._v("2.显示:消息传递 ——>即线程间必须通过明确的发送消息来显式进行通信")]),s._v(" "),n("ul",[n("li",[s._v("线程间的同步:同步是指程序用于控制不同线程之间操作发生相对顺序的机制")])]),s._v(" "),n("p",[s._v("共享内存中:需显式指定方法或者代码需要在线程之间互斥执行")]),s._v(" "),n("p",[s._v("消息传递中，则是隐式。")]),s._v(" "),n("h2",{attrs:{id:"多核并发缓存架构-硬件内存结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多核并发缓存架构-硬件内存结构"}},[s._v("#")]),s._v(" 多核并发缓存架构(硬件内存结构)")]),s._v(" "),n("p",[n("img",{attrs:{src:a(263),alt:"多核并发缓存架构",title:"硬件内存结构"}})]),s._v(" "),n("p",[s._v("一个CPU一核")]),s._v(" "),n("p",[s._v("CPU和主内存通信")]),s._v(" "),n("p",[s._v("后来加入高速缓存，CPU通过高速缓存和主内存通信  高速缓存运算速度接近cpu")]),s._v(" "),n("p",[s._v("通常，当CPU需要访问主存储器时，它会将部分主存储器读入其CPU缓存。 它甚至可以将部分缓存读入其内部寄存器，然后对其执行操作。\n当CPU需要将结果写回主存储器时，它会将值从其内部寄存器刷新到高速缓冲存储器，并在某些时候将值刷新回主存储器。")]),s._v(" "),n("h2",{attrs:{id:"jmm-线程内存模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jmm-线程内存模型"}},[s._v("#")]),s._v(" JMM 线程内存模型")]),s._v(" "),n("p",[n("img",{attrs:{src:a(264),alt:"线程内存模型",title:"JMM"}})]),s._v(" "),n("blockquote",[n("p",[s._v("java线程内存模型跟cpu缓存模型类似,是基于cpu缓存模型来建立的。")])]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" JVM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("jmm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/** volatile可见性\n * @ClassName VolatileVisibilityTest\n * @Description TODO\n * @Version 1.0\n **/")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("VolatileVisibilityTest")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" initFlag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wait data ..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("initFlag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"===============success"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("prepareData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("prepareData")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prepareing data ..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        initFlag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prepare data end ..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("p",[s._v("最开始 两个线程的工作内存当中都存储着 initFlag为false的共享变量副本")]),s._v(" "),n("p",[n("img",{attrs:{src:a(265),alt:"JMM8种原子操作",title:"JMM8种原子操作"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(266),alt:"原子操作流程",title:"原子操作流程"}})]),s._v(" "),n("p",[s._v("MESI缓存一致性协议")]),s._v(" "),n("p",[s._v("多个cpu从主内存读取到同一个数据到各自的高速缓存，当其中的某个cpu修改了缓存里的数据，该数据会马上同步回主内存，\n其他cpu通过总线嗅探机制可以感知到数据的变化从而将自己缓存里的数据失效")]),s._v(" "),n("p",[s._v("JMM缓存不一致问题")]),s._v(" "),n("p",[s._v("解决缓存一致性问题，有两种方式：")]),s._v(" "),n("ol",[n("li",[s._v("通过在总线加LOCK#锁的方式")])]),s._v(" "),n("p",[s._v("在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量i所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("通过缓存一致性协议")])]),s._v(" "),n("p",[s._v('上面说了，LOCK#会锁总线，实际上这不现实，因为锁总线效率太低了。因此最好能做到：使用多组缓存，但是它们的行为看起来只有一组缓存那样。缓存一致性协议就是为了做到这一点而设计的，就像名称所暗示的那样，这类协议就是要使多组缓存的内容保持一致。缓存一致性协议有多种，但是日常处理的大多数计算机设备都属于"嗅探（snooping）"协议，基本思想是：')]),s._v(" "),n("p",[s._v("所有内存的传输都发生在一条共享的总线上，而所有的处理器都能看到这条总线：缓存本身是独立的，但是内存是共享资源，所有的内存访问都要经过仲裁（同一个指令周期中，只有一个CPU缓存可以读写内存）。CPU缓存不仅仅在做内存传输的时候才与总线打交道，而是不停在嗅探总线上发生的数据交换，跟踪其他缓存在做什么。所以当一个缓存代表它所属的处理器去读写内存时，其它处理器都会得到通知，它们以此来使自己的缓存保持同步。只要某个处理器一写内存，其它处理器马上知道这块内存在它们的缓存段中已失效。")]),s._v(" "),n("h3",{attrs:{id:"指令重排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指令重排序"}},[s._v("#")]),s._v(" 指令重排序")]),s._v(" "),n("blockquote",[n("p",[s._v("理解重排序前这个概念前，我们先转换场景，从java内存模型走出来，来到硬件CPU这个维度。")])]),s._v(" "),n("h4",{attrs:{id:"基本概念："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念："}},[s._v("#")]),s._v(" 基本概念：")]),s._v(" "),n("p",[s._v("在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序（简单理解就是原本我们写的代码指令执行顺序应该是A→B→C，\n但是现在的CPU都是多核CPU，为了秀下优越，为了提高并行度，为了提高性能等，可能会出现指令顺序变为B→A→C等其他情况）。")]),s._v(" "),n("p",[s._v("当然CPU们也不是随便就去重排序，需要满足以下两个条件(遵循的规则):")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("在单线程环境下不能改变程序运行的结果；")])]),s._v(" "),n("li",[n("p",[s._v("存在数据依赖关系的不允许重排序")])])]),s._v(" "),n("h4",{attrs:{id:"重排序分三类："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重排序分三类："}},[s._v("#")]),s._v(" 重排序分三类：")]),s._v(" "),n("p",[s._v("1、"),n("strong",[s._v("编译器优化的重排序")]),s._v("。编译器在不改变"),n("strong",[s._v("单线程")]),s._v("程序语义的前提下，可以重新安排语句的执行顺序")]),s._v(" "),n("p",[s._v("2、"),n("strong",[s._v("指令级并行的重排序")]),s._v("。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在"),n("strong",[s._v("数据依赖性")]),s._v("，\n处理器可以改变语句对应机器指令的执行顺序。")]),s._v(" "),n("p",[s._v("3、"),n("strong",[s._v("内存系统的重排序")]),s._v("。由于处理器使用缓存和读／写缓冲区，这使得"),n("strong",[s._v("加载和存储操作")]),s._v("看上去可能是在乱序执行。")]),s._v(" "),n("p",[s._v("从 Java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(267),alt:"最终实际执行的指令序列",title:"最终实际执行的指令序列"}})]),s._v(" "),n("p",[n("strong",[s._v("那么重排序会遵循什么样的规则？")])]),s._v(" "),n("h4",{attrs:{id:"as-if-serial"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#as-if-serial"}},[s._v("#")]),s._v(" as-if-serial")]),s._v(" "),n("p",[s._v("as-if-serial语义的意思是：")]),s._v(" "),n("p",[s._v("不管怎么重排序，（单线程）程序的执行结果不能被改变。编译器，runtime和处理器都必须遵守as-if-serial语义。\nOK，这就相当于给CPU们定下规则。不要随便重排序。要满足我这个as-if-serial的前置条件，才能重排序。")]),s._v(" "),n("p",[s._v("as-if-serial语义把单线程程序保护了起来，遵守as-if-serial语义的编译器，runtime和处理器共同为编写单线程程序的程序员创建了一个幻觉：\n单线程程序是按程序的顺序来执行的。as-if-serial语义使程序员不必担心单线程中重排序的问题干扰他们，也无需担心内存可见性问题。")]),s._v(" "),n("p",[s._v("注意：as-if-serial"),n("strong",[s._v("只保证单线程环境")]),s._v("，多线程环境下无效。那多线程，并发编程下怎么办？")]),s._v(" "),n("h3",{attrs:{id:"多线程下导致的问题及解决办法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程下导致的问题及解决办法"}},[s._v("#")]),s._v(" 多线程下导致的问题及解决办法")]),s._v(" "),n("p",[n("strong",[s._v("上面的这些重排序都可能导致多线程程序出现内存可见性问题，JMM那么如何解决？")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("对于编译器重排序，JMM 的编译器重排序规则会"),n("strong",[s._v("禁止特定类型的编译器重排序")]),s._v("（不是所有的编译器重排序都要禁止）。")])]),s._v(" "),n("li",[n("p",[s._v("对于处理器重排序，JMM 的处理器重排序规则会要求 Java 编译器在生成指令序列时，"),n("strong",[s._v("插入特定类型的内存屏障指令")]),s._v("，\n通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。")])])]),s._v(" "),n("p",[n("strong",[s._v("JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。")])]),s._v(" "),n("h3",{attrs:{id:"什么是内存屏障？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是内存屏障？"}},[s._v("#")]),s._v(" 什么是内存屏障？")]),s._v(" "),n("p",[s._v("内存屏障（Memory Barrier）是一种CPU指令.")]),s._v(" "),n("p",[s._v("内存屏障也称为内存栅栏或栅栏指令，是一种屏障指令，它使CPU或编译器对屏障指令之前和之后发出的内存操作执行一个排序约束。")]),s._v(" "),n("p",[s._v("实际运用场景")]),s._v(" "),n("p",[s._v("volatile便是基于内存屏障实现的。")]),s._v(" "),n("p",[n("strong",[s._v("观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令")]),s._v("，这个指令就相当于一个内存屏障。具体表现为：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("当"),n("strong",[s._v("写")]),s._v("一个volatile 变量时，JMM 会把该线程对应的本地内存中的共享变量值"),n("strong",[s._v("立即刷新")]),s._v("到主内存中。")])]),s._v(" "),n("li",[n("p",[s._v("当"),n("strong",[s._v("读")]),s._v("一个volatile 变量时，JMM 会把该线程对应的"),n("strong",[s._v("本地内存设置为无效，直接从主内存中读取共享变量")])])])]),s._v(" "),n("p",[s._v("从而保证了，如果某个线程对volatile修饰的共享变量进行更新，那么其他线程可以立马看到这个更新，这就是"),n("strong",[s._v("所谓的线程可见性")]),s._v("。")]),s._v(" "),n("h3",{attrs:{id:"happens-before原则-先行发生原则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#happens-before原则-先行发生原则"}},[s._v("#")]),s._v(" happens-before原则(先行发生原则)")]),s._v(" "),n("p",[s._v("从jdk5开始，java使用新的JSR-133内存模型，基于happens-before的概念来阐述操作之间的内存可见性。")]),s._v(" "),n("p",[s._v("换句话说，在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。")]),s._v(" "),n("p",[s._v("happens-before原则是JMM中非常重要的原则，它是判断数据是否存在竞争、线程是否安全的主要依据，保证了多线程环境下的可见性。")]),s._v(" "),n("h3",{attrs:{id:"as-if-serial和happens-before小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#as-if-serial和happens-before小结"}},[s._v("#")]),s._v(" as-if-serial和happens-before小结")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("as-if-serial语义保证单线程内程序的执行结果不被改变")])]),s._v(" "),n("li",[n("p",[s._v("happens-before关系保证正确同步的多线程程序的执行结果不被改变。")])]),s._v(" "),n("li",[n("p",[s._v("其实都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);